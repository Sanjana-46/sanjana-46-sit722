name: Deploy to Production on main

on:
  push:
    branches: [ "main" ]

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  AZURE_RG: ${{ secrets.AZURE_RG }}
  AZURE_REGION: ${{ secrets.AZURE_REGION }}
  PROD_CG: sit722-prod-frontend
  PROD_DNSLABEL: sanjana-prod-frontend

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login (uses SP from azure/login)
        run: |
          az acr login -n $ACR_NAME

      - name: Build & push frontend:latest
        run: |
          LOGIN_SERVER=$(az acr show -n "$ACR_NAME" --query loginServer -o tsv)
          docker build -t ${LOGIN_SERVER}/frontend:latest ./frontend
          docker push ${LOGIN_SERVER}/frontend:latest

      - name: Create/Update ACI for production
        run: |
          LOGIN_SERVER=$(az acr show -n "$ACR_NAME" --query loginServer -o tsv)
          az group create -n "$AZURE_RG" -l "$AZURE_REGION"
          if az container show -g "$AZURE_RG" -n "$PROD_CG" >/dev/null 2>&1; then
            az container delete -g "$AZURE_RG" -n "$PROD_CG" --yes
          fi
          az acr update -n "$ACR_NAME" --admin-enabled true
          USER=$(az acr credential show -n "$ACR_NAME" --query username -o tsv)
          PASS=$(az acr credential show -n "$ACR_NAME" --query "passwords[0].value" -o tsv)

          az container create \
            -g "$AZURE_RG" \
            -n "$PROD_CG" \
            --image "${LOGIN_SERVER}/frontend:latest" \
            --registry-login-server "$LOGIN_SERVER" \
            --registry-username "$USER" \
            --registry-password "$PASS" \
            --dns-name-label "$PROD_DNSLABEL" \
            --ports 80 \
            --location "$AZURE_REGION" \
            --restart-policy Always
